package vehicle
	public
	with vehicle_devices;
	with basic_devices;
	with basic_debian;
	
	--Polls the ports periodically for a command from the response or avoidance systems
	thread check_for_command
		features
			received_command: in event data port;
			processed_command: out data port;
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 1ms .. 10ms;
			Period => 50ms;
	end check_for_command;
	
	thread implementation check_for_command.standard
	end check_for_command.standard;
	
	--Process a command that has been received
	thread process_command
		features
			command_data: in data port;
			engage: out event data port;
			disengage: out event data port;
		properties
			Dispatch_Protocol => Sporadic;
			Compute_Execution_Time => 1ms .. 10ms;
	end process_command;
	
	thread implementation process_command.standard
	end process_command.standard;
	
	------------------------------------------------------------------------------------------
	
	process control
		features
			command_data: in event data port;
			engage: out event data port;
			disengage: out event data port;
	end control;
	
	process implementation control.standard
		subcomponents
			command_received: thread check_for_command.standard;
			command_processor: thread process_command.standard;
		connections
			raw_command: port command_data -> command_received.received_command									{ Communication_Properties::Latency => 8ms .. 12ms; };
			received_command: port command_received.processed_command -> command_processor.command_data			{ Communication_Properties::Latency => 8ms .. 12ms; };
			engage_command: port command_processor.engage -> engage												{ Communication_Properties::Latency => 8ms .. 12ms; };
			disengage_command: port command_processor.disengage -> disengage									{ Communication_Properties::Latency => 8ms .. 12ms; };
		modes
			wait_for_command: initial mode;
			process_command: mode;
			engage_system: mode;
			disengage_system: mode;
			
			wait_for_command-[command_data]->process_command;
			process_command-[command_processor.engage]->engage_system;
			process_command-[command_processor.disengage]->disengage_system;
			engage_system-[engage]->wait_for_command;
			disengage_system-[disengage]->wait_for_command;
	end control.standard;
	
	------------------------------------------------------------------------------------------
	
	system vehicle
		features
			speed_command: in event data port;
			position_command: in event data port;
			airbag_command: in event data port;
			direction_command: in event data port;
	end vehicle;
	
	system implementation vehicle.standard
		subcomponents
			brakes: device vehicle_devices::brakes.vehicle;
			accelerator: device vehicle_devices::accelerator.vehicle;
			driver_seatbelt: device vehicle_devices::seatbelt_tighener.driver;
			passenger_seatbelt: device vehicle_devices::seatbelt_tighener.passenger;
			driver_headrest: device vehicle_devices::headrest_adjuster.driver;
			passenger_headrest: device vehicle_devices::headrest_adjuster.passenger;
			driver_seat: device vehicle_devices::seat_adjuster.driver;
			passenger_seat: device vehicle_devices::seat_adjuster.passenger;
			airbag: device vehicle_devices::airbag_deployer.vehicle;
			driver_nudger: device vehicle_devices::nudger.driver;
			passenger_nudger: device vehicle_devices::nudger.passenger;
			wheel_turner: device vehicle_devices::automatic_wheel_turner.vehicle;
			speed_controller: process control.standard;
			position_controller: process control.standard;
			airbag_controller: process control.standard;
			direction_controller: process control.standard;
			vehicle_processor: processor basic_debian::real_time.one_ghz;
			vehicle_memory: memory basic_debian::ram.standard;
			vehicle_bus: bus basic_debian::basic_bus.standard;
		connections
			event_distribution1: port speed_command -> speed_controller.command_data							{ Communication_Properties::Latency => 8ms .. 12ms; };
			event_distribution2: port position_command -> position_controller.command_data						{ Communication_Properties::Latency => 8ms .. 12ms; };
			event_distribution3: port airbag_command -> airbag_controller.command_data							{ Communication_Properties::Latency => 8ms .. 12ms; };
			event_distribution4: port direction_command -> direction_controller.command_data					{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			--in speed, engage is acceleration, disengage is deceleration
			speed_engage1: port speed_controller.engage -> brakes.disengage										{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_engage2: port speed_controller.engage -> accelerator.engage									{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_disengage1: port speed_controller.disengage -> brakes.engage									{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_disengage2: port speed_controller.disengage -> accelerator.disengage							{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			position_engage1: port position_controller.engage -> driver_seatbelt.engage							{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_engage2: port position_controller.engage -> passenger_seatbelt.engage						{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_engage3: port position_controller.engage -> driver_seat.engage								{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_engage4: port position_controller.engage -> passenger_seat.engage							{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_engage5: port position_controller.engage -> driver_nudger.engage							{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_engage6: port position_controller.engage -> passenger_nudger.engage						{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_engage7: port position_controller.engage -> driver_headrest.engage							{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_engage8: port position_controller.engage -> passenger_headrest.engage						{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage1: port position_controller.disengage -> driver_seatbelt.disengage				{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage2: port position_controller.disengage -> passenger_seatbelt.disengage				{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage3: port position_controller.disengage -> driver_seat.disengage					{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage4: port position_controller.disengage -> passenger_seat.disengage					{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage5: port position_controller.disengage -> driver_nudger.disengage					{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage6: port position_controller.disengage -> passenger_nudger.disengage				{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage7: port position_controller.disengage -> driver_headrest.disengage				{ Communication_Properties::Latency => 8ms .. 12ms; };
			position_disengage8: port position_controller.disengage -> passenger_headrest.disengage				{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			airbag_engage: port airbag_controller.engage -> airbag.engage										{ Communication_Properties::Latency => 8ms .. 12ms; };
			airbag_disengage: port airbag_controller.disengage -> airbag.disengage								{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			direction_engage: port direction_controller.engage -> wheel_turner.engage							{ Communication_Properties::Latency => 8ms .. 12ms; };
			direction_disengage: port direction_controller.disengage -> wheel_turner.disengage					{ Communication_Properties::Latency => 8ms .. 12ms; };
		properties
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to speed_controller.command_received;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to speed_controller.command_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to position_controller.command_received;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to position_controller.command_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to airbag_controller.command_received;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to airbag_controller.command_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to direction_controller.command_received;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to direction_controller.command_processor;
			
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to speed_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to position_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to airbag_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to direction_controller;			
	end vehicle.standard;
	
end vehicle;