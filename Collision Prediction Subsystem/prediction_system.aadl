package prediction_system
	public
	with basic_debian;
	with basic_devices;
	with vehicle;
	
	-- Periodically read data coming from the sensor and pass the raw data back
	-- for processing
	thread read_data
		features
			-- data from the sensor received from the bus
			sensor_data: in data port;
			-- the raw data from the sensor for processing
			raw_data: out data port;
		properties
			Dispatch_Protocol => Periodic;
			-- this should happen fairly quickly, we are just reading data
			Compute_Execution_Time => 1ms .. 10ms;
			Period => 50ms;
	end read_data;
	
	thread implementation read_data.standard
	end read_data.standard;
	
	
	-- Process the raw data from the sensor and determine if there is the probability
	-- of an accident.  
	thread process_data
		features
			processed_data: in data port;
			-- no type of collision could be predicted
			collision_unprobable: out data port;
			-- a collision of some type is possible
			collision_probable: out data port;
		properties
			Dispatch_Protocol => Sporadic;
			-- this could involve some image processing so provide a bit of extra time
			Compute_Execution_Time => 1ms .. 500ms;
	end process_data;
	
	thread implementation process_data.standard
	end process_data.standard;
	
	-- If a collision has been detected, is it a true collision.  If so, is it avoidable.
	thread determine_course
		features
			-- the data describing the possible collision
			collision_data: in data port;
			-- the data is a false positive
			false_positive: out event data port;
			-- the data contains a collision that can probably be avoided
			avoidable_collision_detected: out event data port;
			-- the data contains a collision that can probably not be avoided
			unavoidable_collision_detected: out event data port;
		properties
			Dispatch_Protocol => Sporadic;
			-- this should finish fairly quickly
			Compute_Execution_Time => 1ms .. 50ms;
	end determine_course;
	
	thread implementation determine_course.standard
	end determine_course.standard;
	
	------------------------------------------------------------------------------------------
	
	process control
		features
			sensor_output: in data port;
			avoidable_collision_detected: out event data port;
			unavoidable_collision_detected: out event data port;
			false_positive: out event data port;
	end control;
	
	process implementation control.standard
		subcomponents
			data_collector: thread read_data.standard;
			data_processor: thread process_data.standard;
			collision_helper: thread determine_course.standard;
		connections
			poll_raw_output: port sensor_output -> data_collector.sensor_data									{ Communication_Properties::Latency => 8ms .. 12ms; };
			process_data: port data_collector.raw_data -> data_processor.processed_data							{ Communication_Properties::Latency => 8ms .. 12ms; };
			collision_detected: port data_processor.collision_probable -> collision_helper.collision_data		{ Communication_Properties::Latency => 8ms .. 12ms; };
			outcome1: port collision_helper.avoidable_collision_detected -> avoidable_collision_detected		{ Communication_Properties::Latency => 8ms .. 12ms; };
			outcome2: port collision_helper.unavoidable_collision_detected -> unavoidable_collision_detected	{ Communication_Properties::Latency => 8ms .. 12ms; };
			false_outcome: port collision_helper.false_positive -> false_positive								{ Communication_Properties::Latency => 8ms .. 12ms; };
		modes	
			-- collision prediction system state machine
			wait_for_sensor: initial mode;
			sensor_data_received: mode;
			sensor_data_processed: mode;
			check_collision_data: mode;
			collision_probable: mode;
			true_positive_detected: mode;
			false_positive_detected: mode;
			avoidable_collision: mode;
			unavoidable_collision: mode;
			
			wait_for_sensor-[sensor_output]->sensor_data_received;
			sensor_data_received-[data_processor.collision_unprobable]->wait_for_sensor;
			sensor_data_received-[data_processor.collision_probable]->check_collision_data;
			check_collision_data-[collision_helper.false_positive]->false_positive_detected;
			false_positive_detected-[collision_helper.false_positive]->wait_for_sensor;
			check_collision_data-[collision_helper.avoidable_collision_detected]->true_positive_detected;
			check_collision_data-[collision_helper.unavoidable_collision_detected]->true_positive_detected;
			true_positive_detected-[collision_helper.avoidable_collision_detected]->avoidable_collision;
			true_positive_detected-[collision_helper.unavoidable_collision_detected]->unavoidable_collision;
			avoidable_collision-[avoidable_collision_detected]->wait_for_sensor;
			unavoidable_collision-[unavoidable_collision_detected]->wait_for_sensor;
	end control.standard;
	
	------------------------------------------------------------------------------------------
	
	system prediction_system
		features
			external_message: in data port;
			external_message_unavoidable: out event data port;
			external_message_avoidable: out event data port;
			motion_detector_unavoidable: out event data port;
			motion_detector_avoidable: out event data port;
			debris_detector_unavoidable: out event data port;
			debris_detector_avoidable: out event data port;
			speed_detector_unavoidable: out event data port;
			speed_detector_avoidable: out event data port;
			vehicle_detector_unavoidable: out event data port;
			vehicle_detector_avoidable: out event data port;
			tire_detector_unavoidable: out event data port;
			tire_detector_avoidable: out event data port;
			conditions_detector_unavoidable: out event data port;
			conditions_detector_avoidable: out event data port;
			driver_detector_unavoidable: out event data port;
			driver_detector_avoidable: out event data port;
			false_positive: out event data port;
	end prediction_system;
	
	system implementation prediction_system.standard
		subcomponents
			motion_sensor: device basic_devices::sensor.motion;
			speed_sensor: device basic_devices::sensor.speed;
			frontal_debris_sensor: device basic_devices::sensor.frontal_debris;
			rear_debris_sensor: device basic_devices::sensor.rear_debris;
			frontal_vehicle_sensor: device basic_devices::sensor.frontal_vehicle;
			rear_vehicle_sensor: device basic_devices::sensor.rear_vehicle;
			side_vehicle_sensor: device basic_devices::sensor.side_vehicle;
			tire_pressure_sensor: device basic_devices::sensor.tire_pressure;
			tire_tread_sensor: device basic_devices::sensor.tire_tread;
			wheel_slippage_sensor: device basic_devices::sensor.wheel_slippage;
			brake_depth_sensor: device basic_devices::sensor.brake_depth;
			road_conditions_sensor: device basic_devices::sensor.road_conditions;
			visibility_sensor: device basic_devices::sensor.visibility;
			driver_responsivity_sensor: device basic_devices::sensor.driver_responsive;
			driver_impairment_sensor: device basic_devices::sensor.driver_impaired;
			debris_controller: process control.standard;
			motion_controller: process control.standard;
			speed_controller: process control.standard;
			vehicle_controller: process control.standard;
			tire_controller: process control.standard;
			conditions_controller: process control.standard;
			driver_controller: process control.standard;
			external_message_controller: process control.standard;
			vehicle_processor: processor basic_debian::real_time.one_ghz;
			vehicle_memory: memory basic_debian::ram.standard;
			vehicle_bus: bus basic_debian::basic_bus.standard;
		connections
			motion_sensor_connection: bus access vehicle_bus <-> motion_sensor.ba																{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_sensor_connection: bus access vehicle_bus <-> speed_sensor.ba																	{ Communication_Properties::Latency => 8ms .. 12ms; };
			frontal_debris_sensor_connection: bus access vehicle_bus <-> frontal_debris_sensor.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			rear_debris_sensor_connection: bus access vehicle_bus <-> rear_debris_sensor.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			frontal_vehicle_sensor_connection: bus access vehicle_bus <-> frontal_vehicle_sensor.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			rear_vehicle_sensor_connection: bus access vehicle_bus <-> rear_vehicle_sensor.ba													{ Communication_Properties::Latency => 8ms .. 12ms; };
			side_vehicle_sensor_connection: bus access vehicle_bus <-> side_vehicle_sensor.ba													{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_pressure_sensor_connection: bus access vehicle_bus <-> tire_pressure_sensor.ba													{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_tread_sensor_connection: bus access vehicle_bus <-> tire_tread_sensor.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			wheel_slippage_sensor_connection: bus access vehicle_bus <-> wheel_slippage_sensor.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			brake_depth_sensor_connection: bus access vehicle_bus <-> brake_depth_sensor.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			road_conditions_sensor_connection: bus access vehicle_bus <-> road_conditions_sensor.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			visibility_sensor_connection: bus access vehicle_bus <-> visibility_sensor.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_responsivity_sensor_connection: bus access vehicle_bus <-> driver_responsivity_sensor.ba										{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_impairment_sensor_connection: bus access vehicle_bus <-> driver_impairment_sensor.ba											{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			motion_controller_in: port motion_sensor.sensor_data -> motion_controller.sensor_output												{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_controller_in: port speed_sensor.sensor_data -> speed_controller.sensor_output												{ Communication_Properties::Latency => 8ms .. 12ms; };
			debris_controller_in1: port frontal_debris_sensor.sensor_data -> debris_controller.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			debris_controller_in2: port rear_debris_sensor.sensor_data -> debris_controller.sensor_output										{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_controller_in1: port frontal_vehicle_sensor.sensor_data -> vehicle_controller.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_controller_in2: port rear_vehicle_sensor.sensor_data -> vehicle_controller.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_controller_in3: port side_vehicle_sensor.sensor_data -> vehicle_controller.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_controller_in1: port tire_pressure_sensor.sensor_data -> tire_controller.sensor_output											{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_controller_in2: port tire_tread_sensor.sensor_data -> tire_controller.sensor_output											{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_controller_in3: port wheel_slippage_sensor.sensor_data -> tire_controller.sensor_output										{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_controller_in: port road_conditions_sensor.sensor_data -> conditions_controller.sensor_output							{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_controller_in1: port driver_responsivity_sensor.sensor_data -> driver_controller.sensor_output								{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_controller_in2: port driver_impairment_sensor.sensor_data -> driver_controller.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_controller_in: port external_message -> external_message_controller.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			motion_controller_avoidable: port motion_controller.avoidable_collision_detected -> motion_detector_avoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			motion_controller_unavoidable: port motion_controller.unavoidable_collision_detected -> motion_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			motion_controller_false_positive: port motion_controller.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_controller_avoidable: port speed_controller.avoidable_collision_detected -> speed_detector_avoidable							{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_controller_unavoidable: port speed_controller.unavoidable_collision_detected -> speed_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_controller_false_positive: port speed_controller.false_positive -> false_positive												{ Communication_Properties::Latency => 8ms .. 12ms; };
			debris_controller_avoidable: port debris_controller.avoidable_collision_detected -> debris_detector_avoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			debris_controller_unavoidable: port debris_controller.unavoidable_collision_detected -> debris_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			debris_controller_false_positive: port debris_controller.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_controller_avoidable: port vehicle_controller.avoidable_collision_detected -> vehicle_detector_avoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_controller_unavoidable: port vehicle_controller.unavoidable_collision_detected -> vehicle_detector_unavoidable				{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_controller_false_positive: port vehicle_controller.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_controller_avoidable: port tire_controller.avoidable_collision_detected -> tire_detector_avoidable								{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_controller_unavoidable: port tire_controller.unavoidable_collision_detected -> tire_detector_unavoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_controller_false_positive: port tire_controller.false_positive -> false_positive												{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_controller_avoidable: port conditions_controller.avoidable_collision_detected -> conditions_detector_avoidable			{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_controller_unavoidable: port conditions_controller.unavoidable_collision_detected -> conditions_detector_unavoidable		{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_controller_false_positive: port conditions_controller.false_positive -> false_positive									{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_controller_avoidable: port driver_controller.avoidable_collision_detected -> driver_detector_avoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_controller_unavoidable: port driver_controller.unavoidable_collision_detected -> driver_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_controller_false_positive: port driver_controller.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_out_avoidable: port external_message_controller.avoidable_collision_detected -> external_message_avoidable			{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_out_unavoidable: port external_message_controller.unavoidable_collision_detected -> external_message_unavoidable	{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_controller_false_positive: port external_message_controller.false_positive -> false_positive						{ Communication_Properties::Latency => 8ms .. 12ms; };
		properties
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to motion_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to motion_controller.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to speed_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to speed_controller.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to debris_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to debris_controller.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to vehicle_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to vehicle_controller.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to tire_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to tire_controller.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to conditions_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to conditions_controller.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to driver_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to driver_controller.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to external_message_controller.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to external_message_controller.data_processor;
			
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to speed_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to motion_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to debris_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to vehicle_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to tire_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to conditions_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to driver_controller;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to external_message_controller;
	end prediction_system.standard;
	
end prediction_system;