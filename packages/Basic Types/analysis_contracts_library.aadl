-- Copyright (c) 2015 Carnegie Mellon University and Ivan Ruchkin.
-- All Rights Reserved.
--
-- Released under a modified MIT license, please see license.txt or contact permission@sei.cmu.edu for full terms.  DM-0002665
--
-- This Software includes and/or makes use of the following Third-Party Software subject to its own license:
-- collision_detection_aadl
-- ========================
--
-- A AADL model of a collision prevention system for use in a telematics architecture
--
-- License
-- =======
--
-- The MIT License (MIT) 
-- Copyright (c) 2013 Nicholas Guzzardo, Mike Kabbani, Ethan McGee
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


-- this package is a collection of analysis contracts for the autonomous vehicle system
package contracts_library
public  
with Sensor_Properties, Reliability_Properties, Security_Properties, Control_Properties; 

annex contract {**
	
	-- Failure Modes and Effects Analysis creates a redundancy structure tolerant random failures.  
	name FMEA
	input 
			sensor.Pfail, system.AlphaFail 
	output 
			sensor, system, controller -- in this case "system" represents a system mode
			
	assumes -- "Component failure independence: if one component fails, another component is not more likely to fail."
			-- sensor version
			forall s1: sensor, s2: sensor : P(!s1.Avail || s2.Avail) <= P(!s1.Avail) + EpsilonFail  
	assumes -- controller version
			forall c1: controller, c2: controller : P(!c1.Avail || c2.Avail) <= P(!c1.Avail) + EpsilonFail
			-- TODO create rigorous syntax for probabilistic statements
	
	guarantees -- "Functioning controllers: some sensor provides each variable that some controller expects."
			forall m:system : 					-- system/mode
				( exists c:controller : m.contains(c) ->   -- controller
					( forall v:Variable : c.VarsR.contains(v) ->  -- variable	
						( exists s:sensor : --sensor 
							m.contains(s) && s.VarsS.contains(v)
						) 
					)
				)
	
	-- Analyzes the trustworthiness of sensors in a given security context
	name TrustworthinessAnalysis 
	input 
			sensor, sensor.Placement, sensor.Pow, controller.Pow, sensor.Avail, controller.Avail, system.AttackM 
	output
			sensor.Trust
	assumes --"Component failure dependence – some components are likely to fail together."
			-- sensor version
			exists s1: sensor, s2: sensor : 
				P(!s1.Avail || s2.Avail) <= P(!s1.Avail) - EpsilonFail
	assumes 
			-- controller version
			exists c1: controller, c2: controller: 
				P(!c1.Avail || c2.Avail) <= P(!c1.Avail) - EpsilonFail
	guarantees -- "Correct trustworthiness assignment – a sensor is not trustworthy if and only if it is vulnerable for the considered attacker model."
			forall m: system, s: sensor : 
				m.contains(s) && !s.Trust -> m.AttackM.IsVuln(s)
			
	-- Verifies if the control meets the safety requirements
	name ControlSafetyAnalysis
	input 
			sensor, sensor.VarS, controller, controller.VarR
	output
			controller.CtrlSafe
	assumes -- "Minimal sensor trust – for each untrusted sensor there is at least one different trusted sensor."
			 forall m: system, c: controller, v: Variable : -- mode, controller, and variable
			 	m.contains(c) && c.VarsR.contains(v) -> 
					( exists fun: fun_sensor_sensor :  -- matching function between trustworthy and untrustwortyh sensors
						( forall su: sensor : su.Vars.contains(v) && !su.Trust ->  -- untrustworthy sensor
							( exists st: sensor :  -- trustworthy sensor
								m.contains(st) && st.Vars.contains(v) && st.Trust && fun(st) = su -- matching
							)
						)
					)
			
			-- TODO: create rigorous syntax for function quantification. 
**};

end contracts_library; 