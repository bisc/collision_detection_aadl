-- Copyright (c) 2015 Carnegie Mellon University and Ivan Ruchkin.
-- All Rights Reserved.
--
-- Released under a modified MIT license, please see license.txt or contact permission@sei.cmu.edu for full terms.  DM-0002665
--
-- This Software includes and/or makes use of the following Third-Party Software subject to its own license:
-- collision_detection_aadl
-- ========================
--
-- A AADL model of a collision prevention system for use in a telematics architecture
--
-- License
-- =======
--
-- The MIT License (MIT) 
-- Copyright (c) 2013 Nicholas Guzzardo, Mike Kabbani, Ethan McGee
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


-- The full system of the car, composing all subsystem.  
-- This is the main AADL file. 
package complete_car_system
public
	with prediction_subsystem, 
		avoidance_subsystem, 
		response_subsystem, 
		networking_subsystem, 
		user_interaction_subsystem, 
		vehicle_actuation,
		contracts_library;
	
	-- no interface information needed
	-- except external events that trigger various failure modes
	system complete_car
		features
			condition_nominal: in event port;
			condition_1: in event port;
			condition_2: in event port;
			condition_3: in event port;
			
	end complete_car;
	
	-- compose subsystems
	system implementation complete_car.impl
	
		subcomponents
			avoider: system avoidance_subsystem::avoidance_subsystem.impl;
			predictor: system prediction_subsystem::prediction_subsystem.standard -- match modes between the whole system and the prediction subsystem
				in modes (nominal => nominal, fail_mode_1 => fail_mode_1, fail_mode_2 => fail_mode_2, fail_mode_3 => fail_mode_3);
			networker: system networking_subsystem::networking_subsystem.standard;
			responder: system response_subsystem::response_subsystem.standard;
			user_interaction: system user_interaction_subsystem::user_interaction_subsystem.standard;
			vehicle_actuation: system vehicle_actuation::vehicle_actuation.standard;
			
		connections
			external_message: port networker.received_message -> predictor.external_message 											{ Communication_Properties::Latency => 8ms .. 12ms; };
		
			motion_unavoidable: port predictor.motion_detector_unavoidable -> avoider.motion_unavoidable_port 							{ Communication_Properties::Latency => 8ms .. 12ms; };
			motion_avoidable: port predictor.motion_detector_avoidable -> avoider.motion_avoidable_port 								{ Communication_Properties::Latency => 8ms .. 12ms; };
			debris_unavoidable: port predictor.obstacle_detector_unavoidable -> avoider.debris_unavoidable_port 							{ Communication_Properties::Latency => 8ms .. 12ms; };
			debris_avoidable: port predictor.obstacle_detector_avoidable -> avoider.debris_avoidable_port 								{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_unavoidable: port predictor.speed_detector_unavoidable -> avoider.speed_unavoidable_port 								{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_avoidable: port predictor.speed_detector_avoidable -> avoider.speed_avoidable_port 									{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_unavoidable: port predictor.vehicle_detector_unavoidable -> avoider.vehicle_unavoidable_port 						{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_avoidable: port predictor.vehicle_detector_avoidable -> avoider.vehicle_avoidable_port 								{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_unavoidable: port predictor.tire_detector_unavoidable -> avoider.tire_unavoidable_port 								{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_avoidable: port predictor.tire_detector_avoidable -> avoider.tire_avoidable_port 										{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_unavoidable: port predictor.conditions_detector_unavoidable -> avoider.conditions_unavoidable_port 				{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_avoidable: port predictor.conditions_detector_avoidable -> avoider.conditions_avoidable_port 					{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_unavoidable: port predictor.driver_detector_unavoidable -> avoider.driver_unavoidable_port 							{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_avoidable: port predictor.driver_detector_avoidable -> avoider.driver_avoidable_port 								{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_unavoidable: port predictor.external_message_unavoidable -> avoider.external_unavoidable_port 						{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_avoidable: port predictor.external_message_avoidable -> avoider.external_avoidable_port 							{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			response_motion_unavoidable: port predictor.motion_detector_unavoidable -> responder.external_message_unavoidable 			{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_motion_avoidable: port predictor.motion_detector_avoidable -> responder.external_message_avoidable 				{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_obstacle_unavoidable: port predictor.obstacle_detector_unavoidable -> responder.external_message_unavoidable 			{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_obstacle_avoidable: port predictor.obstacle_detector_avoidable -> responder.external_message_avoidable 				{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_speed_unavoidable: port predictor.speed_detector_unavoidable -> responder.external_message_unavoidable 			{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_speed_avoidable: port predictor.speed_detector_avoidable -> responder.external_message_avoidable 					{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_vehicle_unavoidable: port predictor.vehicle_detector_unavoidable -> responder.external_message_unavoidable 		{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_vehicle_avoidable: port predictor.vehicle_detector_avoidable -> responder.external_message_avoidable 				{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_tire_unavoidable: port predictor.tire_detector_unavoidable -> responder.external_message_unavoidable 				{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_tire_avoidable: port predictor.tire_detector_avoidable -> responder.external_message_avoidable 					{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_conditions_unavoidable: port predictor.conditions_detector_unavoidable -> responder.external_message_unavoidable 	{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_conditions_avoidable: port predictor.conditions_detector_avoidable -> responder.external_message_avoidable 		{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_driver_unavoidable: port predictor.driver_detector_unavoidable -> responder.external_message_unavoidable 			{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_driver_avoidable: port predictor.driver_detector_avoidable -> responder.external_message_avoidable			 		{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_external_unavoidable: port predictor.external_message_unavoidable -> responder.external_message_unavoidable 		{ Communication_Properties::Latency => 8ms .. 12ms; };
	        response_external_avoidable: port predictor.external_message_avoidable -> responder.external_message_avoidable 				{ Communication_Properties::Latency => 8ms .. 12ms; };
	 
	        send_message_to_external: port responder.emergency_message -> networker.message_to_send 									{ Communication_Properties::Latency => 8ms .. 12ms; };
	        send_message_to_driver: port responder.driver_alert_message -> user_interaction.message_to_send_to_user 					{ Communication_Properties::Latency => 8ms .. 12ms; };
	         
	        auto_braking: port avoider.braking_cmd->vehicle_actuation.speed_command 																{ Communication_Properties::Latency => 8ms .. 12ms; };
	        auto_steering: port avoider.steering_cmd->vehicle_actuation.direction_command 														{ Communication_Properties::Latency => 8ms .. 12ms; };
	    	
		modes -- has two independent state machines 
		
	        -- sensor failure modes
			nominal: initial mode;
			fail_mode_1: mode; 
			fail_mode_2: mode;
			fail_mode_3: mode;
	        
	        nominal-[condition_1]->fail_mode_1;
	        nominal-[condition_2]->fail_mode_2;
	        nominal-[condition_3]->fail_mode_3;
	        
	        fail_mode_1-[condition_nominal]->nominal;
	        fail_mode_2-[condition_nominal]->nominal;
	        fail_mode_3-[condition_nominal]->nominal;
		
			-- collision detection modes
			no_collision_detected: initial mode;
	        avoidable_collision: mode;
	        unavoidable_collision: mode;
	        
	        no_collision_detected-[predictor.false_positive]->no_collision_detected;
	        no_collision_detected-[predictor.motion_detector_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.obstacle_detector_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.speed_detector_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.vehicle_detector_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.tire_detector_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.conditions_detector_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.driver_detector_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.external_message_unavoidable]->unavoidable_collision;
	        no_collision_detected-[predictor.motion_detector_avoidable]->avoidable_collision;
	        no_collision_detected-[predictor.obstacle_detector_avoidable]->avoidable_collision;
	        no_collision_detected-[predictor.speed_detector_avoidable]->avoidable_collision;
	        no_collision_detected-[predictor.vehicle_detector_avoidable]->avoidable_collision;
	        no_collision_detected-[predictor.tire_detector_avoidable]->avoidable_collision;
	        no_collision_detected-[predictor.conditions_detector_avoidable]->avoidable_collision;
	        no_collision_detected-[predictor.driver_detector_avoidable]->avoidable_collision;
	        no_collision_detected-[predictor.external_message_avoidable]->avoidable_collision;
	        
	    -- include relevant analyses
	    annex contract {** 
			use contracts_library::FMEA, 
			contracts_library::TrustworthinessAnalysis, 
			contracts_library::ControlSafetyAnalysis
		**};	
		
	end complete_car.impl;
end complete_car_system;