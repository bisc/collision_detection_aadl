-- Copyright (c) 2015 Carnegie Mellon University and Ivan Ruchkin.
-- All Rights Reserved.
--
-- Released under a modified MIT license, please see license.txt or contact permission@sei.cmu.edu for full terms.  DM-0002665
--
-- This Software includes and/or makes use of the following Third-Party Software subject to its own license:
-- collision_detection_aadl
-- ========================
--
-- A AADL model of a collision prevention system for use in a telematics architecture
--
-- License
-- =======
--
-- The MIT License (MIT) 
-- Copyright (c) 2013 Nicholas Guzzardo, Mike Kabbani, Ethan McGee
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


-- The networking subsystem handles communication to other vehicles through various media, and event distribution.

package networking_subsystem
	public
	with basic_computing;
	with basic_devices;
	
	-- Periodically polls sensor to determine if a message has arrived from other vehicles
	thread receive_shortwave_broadcast
		features
			-- the received message that needs to be processed into text
			received_data: in data port;
			-- the text of the message received
			message: out data port;
		properties
			Dispatch_Protocol => Periodic;
			-- we need to poll this sensor fairly often so it should compute rather quickly
			Compute_Execution_Time => 1ms .. 10ms;
			Period => 50ms;
	end receive_shortwave_broadcast;
	
	thread implementation receive_shortwave_broadcast.standard
	end receive_shortwave_broadcast.standard;
	
	-- Sends a message to other vehicles
	thread send_shortwave_broadcast
		features
			-- the port for other vehicles to grab the message from
			message: out data port;
			-- the message to be sent
			message_data: in data port;
		properties
			Dispatch_Protocol => Sporadic;
			-- this can be a bit slow if necessary
			Compute_Execution_Time => 1ms .. 5000ms;		
	end send_shortwave_broadcast;
	
	thread implementation send_shortwave_broadcast.standard
	end send_shortwave_broadcast.standard;
	
	-- Periodically polls sensor to determine if a message has arrived from a cell tower
	thread receive_cellular_broadcast
		features
			-- the received message that needs to be processed into text
			received_data: in data port;
			-- the text of the message received
			message: out data port;
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 1ms .. 10ms;
			Period => 50ms;
	end receive_cellular_broadcast;
	
	thread implementation receive_cellular_broadcast.standard
	end receive_cellular_broadcast.standard;
	
	-- Sends a message to a cell tower
	thread send_cellular_broadcast
		features
			-- the port for other vehicles to grab the message from
			message: out data port;
			-- the message to be sent
			message_data: in data port;
		properties
			Dispatch_Protocol => Sporadic;
			-- this can be a bit slow if necessary
			Compute_Execution_Time => 1ms .. 5000ms;	
	end send_cellular_broadcast;
	
	thread implementation send_cellular_broadcast.standard
	end send_cellular_broadcast.standard;
	
	------------------------------------------------------------------------------------------
	
	process message_handling
		features
			received_message: out data port;
			message_to_send: in data port;
	end message_handling;
	
	process implementation message_handling.sender
		subcomponents
			shortwave_sender: thread send_shortwave_broadcast.standard;
			cellular_sender: thread send_cellular_broadcast.standard;
		connections
			send_message_shortwave: port message_to_send -> shortwave_sender.message_data				{ Communication_Properties::Latency => 8ms .. 12ms; };
			send_message_cellular: port message_to_send -> cellular_sender.message_data					{ Communication_Properties::Latency => 8ms .. 12ms; };
		modes
			--broadcast receiver state machine
			wait_for_message_to_send: initial mode;
			got_message_to_send: mode;
			message_sent: mode;
			
			wait_for_message_to_send-[message_to_send]->got_message_to_send;
			got_message_to_send-[shortwave_sender.message]->message_sent;
			got_message_to_send-[cellular_sender.message]->message_sent;
			message_sent-[shortwave_sender.message]->wait_for_message_to_send;
			message_sent-[cellular_sender.message]->wait_for_message_to_send;
	end message_handling.sender;
	
	process implementation message_handling.receiver
		subcomponents
			shortwave_receiver: thread receive_shortwave_broadcast.standard;
			cellular_receiver: thread receive_cellular_broadcast.standard;
		connections
			receive_message_shortwave: port shortwave_receiver.message -> received_message				{ Communication_Properties::Latency => 8ms .. 12ms; };
			receive_message_cellular: port cellular_receiver.message -> received_message				{ Communication_Properties::Latency => 8ms .. 12ms; };
		modes
			--broadcast receiver state machine
			wait_for_message: initial mode;
			message_received: mode;
			
			wait_for_message-[shortwave_receiver.message]->message_received;
			wait_for_message-[cellular_receiver.message]->message_received;
			message_received-[shortwave_receiver.message]->wait_for_message;
			message_received-[cellular_receiver.message]->wait_for_message;
	end message_handling.receiver;
	
	------------------------------------------------------------------------------------------
	
	-- The full networking subsystem
	system networking_subsystem
		features
			received_message: out data port;
			message_to_send: in data port;
	end networking_subsystem;
	
	system implementation networking_subsystem.standard
		subcomponents
			shortwave_receiver: device basic_devices::receiver.shortwave;
			cellular_receiver: device basic_devices::receiver.cellular;
			shortwave_sender: device basic_devices::broadcaster.shortwave;
			cellular_sender: device basic_devices::broadcaster.cellular;
			
			receiver: process message_handling.receiver;
			sender: process message_handling.sender;
			
			bus_driver: device basic_devices::bus_driver.standard;
			event_distributor: device basic_devices::event_distributor.standard;
			
			vehicle_processor: processor basic_computing::real_time.one_ghz;
			vehicle_memory: memory basic_computing::ram.standard;
			vehicle_bus: bus basic_computing::basic_bus.standard;
		connections
			sw_receiver_connection: bus access vehicle_bus <-> shortwave_receiver.ba			{ Communication_Properties::Latency => 8ms .. 12ms; };
			cl_receiver_connection: bus access vehicle_bus <-> cellular_receiver.ba				{ Communication_Properties::Latency => 8ms .. 12ms; };
			sw_sender_connection: bus access vehicle_bus <-> shortwave_sender.ba				{ Communication_Properties::Latency => 8ms .. 12ms; };
			cl_sender_connection: bus access vehicle_bus <-> cellular_sender.ba					{ Communication_Properties::Latency => 8ms .. 12ms; };
			distributor: bus access vehicle_bus <-> event_distributor.ba						{ Communication_Properties::Latency => 8ms .. 12ms; };
			event_sender: bus access vehicle_bus <-> bus_driver.ba								{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			pass_along_received: port receiver.received_message -> received_message				{ Communication_Properties::Latency => 8ms .. 12ms; };
			send_message: port message_to_send -> sender.message_to_send						{ Communication_Properties::Latency => 8ms .. 12ms; };
		properties
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to sender.shortwave_sender;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to sender.cellular_sender;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to receiver.shortwave_receiver;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to receiver.cellular_receiver;
			
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to sender;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to receiver;
	end networking_subsystem.standard;
	
	
end networking_subsystem;