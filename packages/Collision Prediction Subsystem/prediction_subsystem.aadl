-- The collision prediction subsystem monitors car sensors and makes a prediction whether or not a collision is avoidable. 
-- As a whole, it acts as an intelligent car state estimator. 

package prediction_subsystem
	public
	with basic_computing;
	with basic_sensors;
	with vehicle_actuation;
	
	-- Each thread encodes a real-time task
	
	-- Periodically reads data from sensors and passes to the processing thread
	thread read_data
		features
			-- data from sensors received through a bus
			sensor_data: in data port;
			-- raw sensor data for processing
			raw_data: out data port;
		properties
			Dispatch_Protocol => Periodic;
			-- happens quickly because just reading data
			Compute_Execution_Time => 1ms .. 10ms;
			Period => 50ms;
	end read_data;
	
	thread implementation read_data.standard
	end read_data.standard;
	
	
	-- Processes raw sensor data to determine if there a collision is possible
	thread process_data
		features
			processed_data: in data port;
			-- some collision is possible
			collision_likely: out data port;
			-- no collision is currently expected 
			collision_unlikely: out data port;
		properties
			Dispatch_Protocol => Sporadic;
			-- this involves various computing so may take some time
			Compute_Execution_Time => 1ms .. 50ms;
	end process_data;
	
	thread implementation process_data.standard
	end process_data.standard;
	
	-- Determines whether or not a detected collision is avoidable 
	thread determine_avoidable
		features
			-- possible collision description
			collision_data: in data port;
			-- whether this collision is a false positive
			false_positive: out event data port;
			-- collision data that can be avoided
			avoidable_collision_detected: out event data port;
			-- collision data that can not be avoided
			unavoidable_collision_detected: out event data port;
		properties
			Dispatch_Protocol => Sporadic;
			-- a relatively quick decision based on pre-trained algorithms
			Compute_Execution_Time => 1ms .. 30ms;
	end determine_avoidable;
	
	thread implementation determine_avoidable.standard
	end determine_avoidable.standard;
	
	------------------------------------------------------------------------------------------
	
	-- Software process running three tasks: data collection, processing, and collision classification. 
	-- Input: sensor data. Output: avoidable collision/unavoidable collision/false positive. 
	
	process predictor
		features
			sensor_output: in data port;
			avoidable_collision_detected: out event data port;
			unavoidable_collision_detected: out event data port;
			false_positive: out event data port;
	end predictor;
	
	process implementation predictor.standard
		subcomponents
			data_collector: thread read_data.standard;
			data_processor: thread process_data.standard;
			collision_classifier: thread determine_avoidable.standard;
		connections
			poll_raw_output: port sensor_output -> data_collector.sensor_data									{ Communication_Properties::Latency => 8ms .. 12ms; };
			process_data: port data_collector.raw_data -> data_processor.processed_data							{ Communication_Properties::Latency => 8ms .. 12ms; };
			collision_detected: port data_processor.collision_likely -> collision_classifier.collision_data		{ Communication_Properties::Latency => 8ms .. 12ms; };
			outcome1: port collision_classifier.avoidable_collision_detected -> avoidable_collision_detected		{ Communication_Properties::Latency => 8ms .. 12ms; };
			outcome2: port collision_classifier.unavoidable_collision_detected -> unavoidable_collision_detected	{ Communication_Properties::Latency => 8ms .. 12ms; };
			false_outcome: port collision_classifier.false_positive -> false_positive								{ Communication_Properties::Latency => 8ms .. 12ms; };
		modes	
			-- Collision prediction software state machine
			wait_for_sensor: initial mode;
			sensor_data_received: mode;
			sensor_data_processed: mode;
			check_collision_data: mode;
			true_positive_detected: mode;
			false_positive_detected: mode;
			avoidable_collision: mode;
			unavoidable_collision: mode;
			
			wait_for_sensor-[sensor_output]->sensor_data_received;
			sensor_data_received-[data_processor.collision_unlikely]->wait_for_sensor;
			sensor_data_received-[data_processor.collision_likely]->check_collision_data;
			check_collision_data-[collision_classifier.false_positive]->false_positive_detected;
			false_positive_detected-[collision_classifier.false_positive]->wait_for_sensor;
			check_collision_data-[collision_classifier.avoidable_collision_detected]->true_positive_detected;
			check_collision_data-[collision_classifier.unavoidable_collision_detected]->true_positive_detected;
			true_positive_detected-[collision_classifier.avoidable_collision_detected]->avoidable_collision;
			true_positive_detected-[collision_classifier.unavoidable_collision_detected]->unavoidable_collision;
			avoidable_collision-[avoidable_collision_detected]->wait_for_sensor;
			unavoidable_collision-[unavoidable_collision_detected]->wait_for_sensor;
	end predictor.standard;
	
	------------------------------------------------------------------------------------------
	
	-- a full prediction subsystem type
	system prediction_subsystem
		features
			external_message: in data port;
			external_message_unavoidable: out event data port;
			external_message_avoidable: out event data port;
			motion_detector_unavoidable: out event data port;
			motion_detector_avoidable: out event data port;
			obstacle_detector_unavoidable: out event data port;
			obstacle_detector_avoidable: out event data port;
			speed_detector_unavoidable: out event data port;
			speed_detector_avoidable: out event data port;
			vehicle_detector_unavoidable: out event data port;
			vehicle_detector_avoidable: out event data port;
			tire_detector_unavoidable: out event data port;
			tire_detector_avoidable: out event data port;
			conditions_detector_unavoidable: out event data port;
			conditions_detector_avoidable: out event data port;
			driver_detector_unavoidable: out event data port;
			driver_detector_avoidable: out event data port;
			false_positive: out event data port;
				
		-- subsystem modes are matched with the full system 
		requires modes
			nominal: initial mode;
			fail_mode_1: mode; 
			fail_mode_2: mode;
			fail_mode_3: mode;
			
	end prediction_subsystem;
	
	-- Here we set the correspondence between subsystem modes and sensor modes
	system implementation prediction_subsystem.standard
		subcomponents
		
			-- MOVEMENT SENSORS -- 
			gps_sensor: device basic_sensors::sensor.gps -- determines whether a car is moving
				in modes (
					nominal => avail_untrust, 
					fail_mode_1 => avail_untrust, 
					fail_mode_2 => avail_untrust, 
					fail_mode_3 => avail_untrust
				); 
				
			magnetic_speedometer: device basic_sensors::sensor.speedometer  -- measures car's current velocity (a classic electromagnetic speedometer)
				in modes (
					nominal => avail_trust, 
					fail_mode_1 => avail_trust, 
					fail_mode_2 => avail_trust, 
					fail_mode_3 => unavail
				); 
			
			-- OBSTACLE SENSORS -- 
			frontal_obstacle_lidar: device basic_sensors::sensor.frontal_obstacle -- measures distance to obstacles in front of the car (lidar technology) 
				in modes (
					nominal => avail_trust, 
					fail_mode_1 => unavail, 
					fail_mode_2 => avail_trust, 
					fail_mode_3 => avail_trust
				); 
				
			rear_obstacle_lidar: device basic_sensors::sensor.rear_obstacle; -- measures distance to obstacles behind the car (lidar technology)
			
			frontal_vehicle_c2c_sensor: device basic_sensors::sensor.frontal_vehicle -- measures distance to and speed of vehicles in front of the car (c2c technology) 
				in modes (
					nominal => avail_untrust, 
					fail_mode_1 => avail_untrust, 
					fail_mode_2 => unavail, 
					fail_mode_3 => unavail
				); 
				
			rear_vehicle_c2c_sensor: device basic_sensors::sensor.rear_vehicle; -- measures distance to and speed of vehicles behind the car (c2c technology)
			side_vehicle_c2c_sensor: device basic_sensors::sensor.side_vehicle; -- measures distance to and speed of vehicles on the sides of the car (c2c technology)
			
			-- MAINTENANCE SENSORS -- 
			brake_depth_sensor: device basic_sensors::sensor.brake_depth; -- determines whether the brake pads are worn beyond an alert threshold
			tire_pressure_sensor: device basic_sensors::sensor.tire_pressure; -- measures the current tire pressure 
			tire_tread_sensor: device basic_sensors::sensor.tire_tread; -- determines whether the tire thread is worn beyond an alert threshold
			
			-- EXTERNAL CONDITIONS SENSORS -- 
			wheel_slippage_sensor: device basic_sensors::sensor.wheel_slippage; -- measures the current degree of wheel slippage
			road_conditions_sensor: device basic_sensors::sensor.road_conditions; -- measures physical parameters of the road (grade, curvature, moisture, ...) 
			visibility_sensor: device basic_sensors::sensor.visibility; -- estimates the visibility distance given current atmospheric conditions
			
			-- DRIVER SENSORS -- 
			driver_responsiveness_sensor: device basic_sensors::sensor.driver_responsive; -- approximates the current reaction time of the driver 
			driver_impairment_sensor: device basic_sensors::sensor.driver_impaired; -- determines whether a driver can operate the car or is impaired (unconscious, distracted, injured, ...) 
			
			-- PREDICTORS -- 
			motion_predictor: process predictor.standard; -- predicts the car's trajectory
			vehicle_predictor: process predictor.standard; -- predicts other cars' trajectories
			obstacle_predictor: process predictor.standard; -- predicts obstacle trajectories and locations
			speed_predictor: process predictor.standard; -- predicts the car's speed 
			tire_predictor: process predictor.standard; -- predicts the state of car tires
			conditions_predictor: process predictor.standard; -- predicts the external conditions
			driver_predictor: process predictor.standard; -- predicts the driver's state 
			external_message_predictor: process predictor.standard; -- reads external messages and determines if there is an upcoming collision
			
			-- ELECTRONICS --
			vehicle_processor: processor basic_computing::real_time.one_ghz;
			vehicle_memory: memory basic_computing::ram.standard;
			vehicle_bus: bus basic_computing::basic_bus.standard;
			
		connections
			-- sensor connections
			motion_sensor_connection: bus access vehicle_bus <-> gps_sensor.ba																{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_sensor_connection: bus access vehicle_bus <-> magnetic_speedometer.ba																	{ Communication_Properties::Latency => 8ms .. 12ms; };
			frontal_obstacle_sensor_connection: bus access vehicle_bus <-> frontal_obstacle_lidar.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			rear_obstacle_sensor_connection: bus access vehicle_bus <-> rear_obstacle_lidar.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			frontal_vehicle_sensor_connection: bus access vehicle_bus <-> frontal_vehicle_c2c_sensor.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			rear_vehicle_sensor_connection: bus access vehicle_bus <-> rear_vehicle_c2c_sensor.ba													{ Communication_Properties::Latency => 8ms .. 12ms; };
			side_vehicle_sensor_connection: bus access vehicle_bus <-> side_vehicle_c2c_sensor.ba													{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_pressure_sensor_connection: bus access vehicle_bus <-> tire_pressure_sensor.ba													{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_tread_sensor_connection: bus access vehicle_bus <-> tire_tread_sensor.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			wheel_slippage_sensor_connection: bus access vehicle_bus <-> wheel_slippage_sensor.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			brake_depth_sensor_connection: bus access vehicle_bus <-> brake_depth_sensor.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			road_conditions_sensor_connection: bus access vehicle_bus <-> road_conditions_sensor.ba												{ Communication_Properties::Latency => 8ms .. 12ms; };
			visibility_sensor_connection: bus access vehicle_bus <-> visibility_sensor.ba														{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_responsivity_sensor_connection: bus access vehicle_bus <-> driver_responsiveness_sensor.ba										{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_impairment_sensor_connection: bus access vehicle_bus <-> driver_impairment_sensor.ba											{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			-- predictor connections
			motion_predictor_in: port gps_sensor.sensor_data -> motion_predictor.sensor_output												{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_predictor_in: port magnetic_speedometer.sensor_data -> speed_predictor.sensor_output												{ Communication_Properties::Latency => 8ms .. 12ms; };
			obstacle_predictor_in1: port frontal_obstacle_lidar.sensor_data -> obstacle_predictor.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			obstacle_predictor_in2: port rear_obstacle_lidar.sensor_data -> obstacle_predictor.sensor_output										{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_predictor_in1: port frontal_vehicle_c2c_sensor.sensor_data -> vehicle_predictor.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_predictor_in2: port rear_vehicle_c2c_sensor.sensor_data -> vehicle_predictor.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_predictor_in3: port side_vehicle_c2c_sensor.sensor_data -> vehicle_predictor.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_predictor_in1: port tire_pressure_sensor.sensor_data -> tire_predictor.sensor_output											{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_predictor_in2: port tire_tread_sensor.sensor_data -> tire_predictor.sensor_output											{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_predictor_in3: port wheel_slippage_sensor.sensor_data -> tire_predictor.sensor_output										{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_predictor_in: port road_conditions_sensor.sensor_data -> conditions_predictor.sensor_output							{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_predictor_in1: port driver_responsiveness_sensor.sensor_data -> driver_predictor.sensor_output								{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_predictor_in2: port driver_impairment_sensor.sensor_data -> driver_predictor.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_predictor_in: port external_message -> external_message_predictor.sensor_output									{ Communication_Properties::Latency => 8ms .. 12ms; };
			
			motion_predictor_avoidable: port motion_predictor.avoidable_collision_detected -> motion_detector_avoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			motion_predictor_unavoidable: port motion_predictor.unavoidable_collision_detected -> motion_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			motion_predictor_false_positive: port motion_predictor.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_predictor_avoidable: port speed_predictor.avoidable_collision_detected -> speed_detector_avoidable							{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_predictor_unavoidable: port speed_predictor.unavoidable_collision_detected -> speed_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			speed_predictor_false_positive: port speed_predictor.false_positive -> false_positive												{ Communication_Properties::Latency => 8ms .. 12ms; };
			obstacle_predictor_avoidable: port obstacle_predictor.avoidable_collision_detected -> obstacle_detector_avoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			obstacle_predictor_unavoidable: port obstacle_predictor.unavoidable_collision_detected -> obstacle_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			obstacle_predictor_false_positive: port obstacle_predictor.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_predictor_avoidable: port vehicle_predictor.avoidable_collision_detected -> vehicle_detector_avoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_predictor_unavoidable: port vehicle_predictor.unavoidable_collision_detected -> vehicle_detector_unavoidable				{ Communication_Properties::Latency => 8ms .. 12ms; };
			vehicle_predictor_false_positive: port vehicle_predictor.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_predictor_avoidable: port tire_predictor.avoidable_collision_detected -> tire_detector_avoidable								{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_predictor_unavoidable: port tire_predictor.unavoidable_collision_detected -> tire_detector_unavoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			tire_predictor_false_positive: port tire_predictor.false_positive -> false_positive												{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_predictor_avoidable: port conditions_predictor.avoidable_collision_detected -> conditions_detector_avoidable			{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_predictor_unavoidable: port conditions_predictor.unavoidable_collision_detected -> conditions_detector_unavoidable		{ Communication_Properties::Latency => 8ms .. 12ms; };
			conditions_predictor_false_positive: port conditions_predictor.false_positive -> false_positive									{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_predictor_avoidable: port driver_predictor.avoidable_collision_detected -> driver_detector_avoidable						{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_predictor_unavoidable: port driver_predictor.unavoidable_collision_detected -> driver_detector_unavoidable					{ Communication_Properties::Latency => 8ms .. 12ms; };
			driver_predictor_false_positive: port driver_predictor.false_positive -> false_positive											{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_out_avoidable: port external_message_predictor.avoidable_collision_detected -> external_message_avoidable			{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_out_unavoidable: port external_message_predictor.unavoidable_collision_detected -> external_message_unavoidable	{ Communication_Properties::Latency => 8ms .. 12ms; };
			external_message_predictor_false_positive: port external_message_predictor.false_positive -> false_positive						{ Communication_Properties::Latency => 8ms .. 12ms; };
	
		properties
			
			-- cpu allocations
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to motion_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to motion_predictor.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to speed_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to speed_predictor.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to obstacle_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to obstacle_predictor.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to vehicle_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to vehicle_predictor.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to tire_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to tire_predictor.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to conditions_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to conditions_predictor.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to driver_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to driver_predictor.data_processor;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to external_message_predictor.data_collector;
			Allowed_Processor_Binding=>(reference (vehicle_processor)) applies to external_message_predictor.data_processor;
			
			-- memory allocations
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to speed_predictor;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to motion_predictor;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to obstacle_predictor;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to vehicle_predictor;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to tire_predictor;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to conditions_predictor;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to driver_predictor;
			Allowed_Memory_Binding=>(reference (vehicle_memory)) applies to external_message_predictor;
			
	end prediction_subsystem.standard;
	
end prediction_subsystem;